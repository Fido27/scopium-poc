{\rtf1\ansi\ansicpg1252\cocoartf2822
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fmodern\fcharset0 Courier;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\vieww12000\viewh15840\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs24 \cf0 AES-GCM File Encryption Module\
\
Overview\
This module provides two high-level functions for client-side file encryption and decryption using the Web Crypto API:\
- encryptFile(file: File, password: string): Promise<Blob)\
  Encrypts the contents of a File using AES-GCM with a key derived from a password via PBKDF2.\
- decryptFile(encryptedFile: Blob, password: string): Promise<Blob)\
  Decrypts a previously encrypted Blob back into its original binary contents.\
A helper, deriveKey(password: string): Promise<CryptoKey), handles password-based key derivation (PBKDF2 -> AES-GCM).\
\
These apis can be found in the crypto.tsx file in the repository. \
\
deriveKey\
async function deriveKey(password: string): Promise<CryptoKey)\
Derives a 256-bit AES-GCM key from a UTF-8 password using PBKDF2.\
Parameters:\
- password: string \'e2\'80\'94 The user-supplied passphrase.\
Returns:\
- Promise<CryptoKey> \'e2\'80\'94 An AES-GCM key usable for both encryption and decryption.\
How It Works:\
1. Encodes password to bytes via TextEncoder.\
2. Imports that as a "raw" PBKDF2 key.\
3. Runs PBKDF2 with:\
   - Salt: "your-unique-salt"\
   - Iterations: 100,000\
   - Hash: SHA-256\
4. Derives a 256-bit AES-GCM key.\
\
encryptFile\
export async function encryptFile(file: File, password: string): Promise<Blob)\
Encrypts an entire File and returns an encrypted Blob that bundles IV + ciphertext.\
Parameters:\
- file: File \'e2\'80\'94 The file to encrypt.\
- password: string \'e2\'80\'94 The passphrase to derive the AES-GCM key.\
Returns:\
- Promise<Blob> \'e2\'80\'94 A Blob containing:\
   - Bytes 0\'e2\'80\'9311: the 12-byte random IV\
   - Bytes 12\'e2\'80\'93end: the AES-GCM ciphertext\
Steps:\
1. Derive AES-GCM key via deriveKey(password).\
2. Generate a random 12-byte IV.\
3. Read file into a Uint8Array.\
4. Call crypto.subtle.encrypt( name: "AES-GCM", iv , key, fileBytes).\
5. Concatenate IV + ciphertext into a single Uint8Array.\
6. Wrap and return as a Blob.\
\
decryptFile\
export async function decryptFile(encryptedFile: Blob, password: string): Promise<Blob)\
Reverses encryptFile(): it extracts the IV, decrypts the ciphertext, and returns the original data as a Blob.\
Parameters:\
- encryptedFile: Blob \'e2\'80\'94 A Blob produced by encryptFile().\
- password: string \'e2\'80\'94 The same passphrase used for encryption.\
Returns:\
- Promise<Blob> \'e2\'80\'94 A Blob containing the decrypted raw file bytes.\
Steps:\
1. Read the entire encryptedFile into a Uint8Array.\
2. Slice off the first 12 bytes as the IV.\
3. Slice the remainder as the ciphertext.\
4. Derive the AES-GCM key via deriveKey(password).\
5. Call crypto.subtle.decrypt( name: "AES-GCM", iv , key, encryptedData).\
6. Wrap the resulting plaintext bytes in a Blob.\
\
Example Usage\
```ts\
// Encrypting:\
const fileInput = document.querySelector("#file");\
const passwordInput = document.querySelector("#pwd");\
const encryptedBlob = await encryptFile(fileInput.files[0], passwordInput.value);\
// e.g. download or upload encryptedBlob\
\
// Decrypting:\
const decryptedBlob = await decryptFile(encryptedBlob, passwordInput.value);\
// e.g. createObjectURL(decryptedBlob) to preview or download\
```\
\
Security Notes\
- Salt Management: Replace the hard-coded salt with a unique salt stored alongside encrypted data.\
- Iteration Count: 100,000 iterations is a reasonable starting point but may be adjusted for performance.\
- IV Uniqueness: Always use a fresh random IV for each encryption; never reuse IVs with the same key.\
}